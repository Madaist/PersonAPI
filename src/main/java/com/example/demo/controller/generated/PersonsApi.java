/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.demo.controller.generated;

import com.example.demo.dal.model.generated.Person;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;
import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "persons", description = "the persons API")
public interface PersonsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Delete a person by id", nickname = "deletePerson", notes = "Delete a person from the csv file", tags={ "person", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Person not found") })
    @RequestMapping(value = "/persons/{id}",
            method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePerson(@ApiParam(value = "ID of person to be deleted",required = true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Return a list of all persons", nickname = "getAllPersons", notes = "Returns a list of persons", response = Person.class, responseContainer = "List", tags={ "person", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Person.class, responseContainer = "List"),
            @ApiResponse(code = 404, message = "Persons not found") })
    @RequestMapping(value = "/persons",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<List<Person>> getAllPersons() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"lastName\" : \"Istrate\",  \"firstName\" : \"Madalina\",  \"socialSecurityCode\" : \"123456789\",  \"age\" : 20}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Find person by id", nickname = "getPersonById", notes = "Returns a single person", response = Person.class, tags={ "person", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successful operation", response = Person.class),
            @ApiResponse(code = 404, message = "Person not found") })
    @RequestMapping(value = "/persons/{id}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    default ResponseEntity<Person> getPersonById(@ApiParam(value = "ID of person to return",required=true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"lastName\" : \"Istrate\",  \"firstName\" : \"Madalina\",  \"socialSecurityCode\" : \"123456789\",  \"age\" : 20}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Insert a new person", nickname = "insertPerson", notes = "Insert a new person in the csv file", tags={ "person", })
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/persons",
            consumes = { "application/json" },
            method = RequestMethod.POST)
    default ResponseEntity<Void> insertPerson(@ApiParam(value = ""  )  @Valid @RequestBody Person person) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Update a person", nickname = "updatePerson", notes = "Update a person in the csv file by id", tags={ "person", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid person supplied"),
            @ApiResponse(code = 404, message = "Person not found") })
    @RequestMapping(value = "/persons/{id}",
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    default ResponseEntity<Void> updatePerson(@ApiParam(value = "ID of person to be updated",required = true) @PathVariable("id") Integer id,@ApiParam(value = "")  @Valid @RequestBody Person person) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
